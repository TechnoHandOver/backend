// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TechnoHandOver/backend/internal/user (interfaces: Usecase,Repository)

// Package mock_user is a generated GoMock package.
package mock_user

import (
	reflect "reflect"

	models "github.com/TechnoHandOver/backend/internal/models"
	response "github.com/TechnoHandOver/backend/internal/tools/response"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreateRoutePerm mocks base method.
func (m *MockUsecase) CreateRoutePerm(arg0 *models.RoutePerm) *response.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoutePerm", arg0)
	ret0, _ := ret[0].(*response.Response)
	return ret0
}

// CreateRoutePerm indicates an expected call of CreateRoutePerm.
func (mr *MockUsecaseMockRecorder) CreateRoutePerm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoutePerm", reflect.TypeOf((*MockUsecase)(nil).CreateRoutePerm), arg0)
}

// CreateRouteTmp mocks base method.
func (m *MockUsecase) CreateRouteTmp(arg0 *models.RouteTmp) *response.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRouteTmp", arg0)
	ret0, _ := ret[0].(*response.Response)
	return ret0
}

// CreateRouteTmp indicates an expected call of CreateRouteTmp.
func (mr *MockUsecaseMockRecorder) CreateRouteTmp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteTmp", reflect.TypeOf((*MockUsecase)(nil).CreateRouteTmp), arg0)
}

// DeleteRouteTmp mocks base method.
func (m *MockUsecase) DeleteRouteTmp(arg0, arg1 uint32) *response.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteTmp", arg0, arg1)
	ret0, _ := ret[0].(*response.Response)
	return ret0
}

// DeleteRouteTmp indicates an expected call of DeleteRouteTmp.
func (mr *MockUsecaseMockRecorder) DeleteRouteTmp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteTmp", reflect.TypeOf((*MockUsecase)(nil).DeleteRouteTmp), arg0, arg1)
}

// Get mocks base method.
func (m *MockUsecase) Get(arg0 uint32) *response.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*response.Response)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockUsecaseMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUsecase)(nil).Get), arg0)
}

// GetRouteTmp mocks base method.
func (m *MockUsecase) GetRouteTmp(arg0 uint32) *response.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteTmp", arg0)
	ret0, _ := ret[0].(*response.Response)
	return ret0
}

// GetRouteTmp indicates an expected call of GetRouteTmp.
func (mr *MockUsecaseMockRecorder) GetRouteTmp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteTmp", reflect.TypeOf((*MockUsecase)(nil).GetRouteTmp), arg0)
}

// ListRouteTmp mocks base method.
func (m *MockUsecase) ListRouteTmp() *response.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRouteTmp")
	ret0, _ := ret[0].(*response.Response)
	return ret0
}

// ListRouteTmp indicates an expected call of ListRouteTmp.
func (mr *MockUsecaseMockRecorder) ListRouteTmp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouteTmp", reflect.TypeOf((*MockUsecase)(nil).ListRouteTmp))
}

// Login mocks base method.
func (m *MockUsecase) Login(arg0 *models.User) *response.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(*response.Response)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockUsecaseMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUsecase)(nil).Login), arg0)
}

// UpdateRouteTmp mocks base method.
func (m *MockUsecase) UpdateRouteTmp(arg0 *models.RouteTmp) *response.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRouteTmp", arg0)
	ret0, _ := ret[0].(*response.Response)
	return ret0
}

// UpdateRouteTmp indicates an expected call of UpdateRouteTmp.
func (mr *MockUsecaseMockRecorder) UpdateRouteTmp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteTmp", reflect.TypeOf((*MockUsecase)(nil).UpdateRouteTmp), arg0)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeleteRouteTmp mocks base method.
func (m *MockRepository) DeleteRouteTmp(arg0 uint32) (*models.RouteTmp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteTmp", arg0)
	ret0, _ := ret[0].(*models.RouteTmp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRouteTmp indicates an expected call of DeleteRouteTmp.
func (mr *MockRepositoryMockRecorder) DeleteRouteTmp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteTmp", reflect.TypeOf((*MockRepository)(nil).DeleteRouteTmp), arg0)
}

// Insert mocks base method.
func (m *MockRepository) Insert(arg0 *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockRepositoryMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRepository)(nil).Insert), arg0)
}

// InsertRoutePerm mocks base method.
func (m *MockRepository) InsertRoutePerm(arg0 *models.RoutePerm) (*models.RoutePerm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRoutePerm", arg0)
	ret0, _ := ret[0].(*models.RoutePerm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertRoutePerm indicates an expected call of InsertRoutePerm.
func (mr *MockRepositoryMockRecorder) InsertRoutePerm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRoutePerm", reflect.TypeOf((*MockRepository)(nil).InsertRoutePerm), arg0)
}

// InsertRouteTmp mocks base method.
func (m *MockRepository) InsertRouteTmp(arg0 *models.RouteTmp) (*models.RouteTmp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRouteTmp", arg0)
	ret0, _ := ret[0].(*models.RouteTmp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertRouteTmp indicates an expected call of InsertRouteTmp.
func (mr *MockRepositoryMockRecorder) InsertRouteTmp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRouteTmp", reflect.TypeOf((*MockRepository)(nil).InsertRouteTmp), arg0)
}

// Select mocks base method.
func (m *MockRepository) Select(arg0 uint32) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockRepositoryMockRecorder) Select(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockRepository)(nil).Select), arg0)
}

// SelectByVkId mocks base method.
func (m *MockRepository) SelectByVkId(arg0 uint32) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByVkId", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByVkId indicates an expected call of SelectByVkId.
func (mr *MockRepositoryMockRecorder) SelectByVkId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByVkId", reflect.TypeOf((*MockRepository)(nil).SelectByVkId), arg0)
}

// SelectRouteTmp mocks base method.
func (m *MockRepository) SelectRouteTmp(arg0 uint32) (*models.RouteTmp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRouteTmp", arg0)
	ret0, _ := ret[0].(*models.RouteTmp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRouteTmp indicates an expected call of SelectRouteTmp.
func (mr *MockRepositoryMockRecorder) SelectRouteTmp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRouteTmp", reflect.TypeOf((*MockRepository)(nil).SelectRouteTmp), arg0)
}

// SelectRouteTmpArray mocks base method.
func (m *MockRepository) SelectRouteTmpArray() (*models.RoutesTmp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRouteTmpArray")
	ret0, _ := ret[0].(*models.RoutesTmp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRouteTmpArray indicates an expected call of SelectRouteTmpArray.
func (mr *MockRepositoryMockRecorder) SelectRouteTmpArray() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRouteTmpArray", reflect.TypeOf((*MockRepository)(nil).SelectRouteTmpArray))
}

// Update mocks base method.
func (m *MockRepository) Update(arg0 *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), arg0)
}

// UpdateRouteTmp mocks base method.
func (m *MockRepository) UpdateRouteTmp(arg0 *models.RouteTmp) (*models.RouteTmp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRouteTmp", arg0)
	ret0, _ := ret[0].(*models.RouteTmp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRouteTmp indicates an expected call of UpdateRouteTmp.
func (mr *MockRepositoryMockRecorder) UpdateRouteTmp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteTmp", reflect.TypeOf((*MockRepository)(nil).UpdateRouteTmp), arg0)
}
