// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TechnoHandOver/backend/internal/ad (interfaces: Usecase,Repository)

// Package mock_ad is a generated GoMock package.
package mock_ad

import (
	reflect "reflect"

	models "github.com/TechnoHandOver/backend/internal/models"
	response "github.com/TechnoHandOver/backend/internal/tools/response"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUsecase) Create(arg0 *models.Ad) *response.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*response.Response)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUsecaseMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsecase)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockUsecase) Delete(arg0, arg1 uint32) *response.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*response.Response)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUsecaseMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUsecase)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockUsecase) Get(arg0 uint32) *response.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*response.Response)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockUsecaseMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUsecase)(nil).Get), arg0)
}

// Search mocks base method.
func (m *MockUsecase) Search(arg0 *models.AdsSearch) *response.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0)
	ret0, _ := ret[0].(*response.Response)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockUsecaseMockRecorder) Search(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockUsecase)(nil).Search), arg0)
}

// SetAdUserExecutor mocks base method.
func (m *MockUsecase) SetAdUserExecutor(arg0, arg1 uint32) *response.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAdUserExecutor", arg0, arg1)
	ret0, _ := ret[0].(*response.Response)
	return ret0
}

// SetAdUserExecutor indicates an expected call of SetAdUserExecutor.
func (mr *MockUsecaseMockRecorder) SetAdUserExecutor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAdUserExecutor", reflect.TypeOf((*MockUsecase)(nil).SetAdUserExecutor), arg0, arg1)
}

// UnsetAdUserExecutor mocks base method.
func (m *MockUsecase) UnsetAdUserExecutor(arg0, arg1 uint32) *response.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsetAdUserExecutor", arg0, arg1)
	ret0, _ := ret[0].(*response.Response)
	return ret0
}

// UnsetAdUserExecutor indicates an expected call of UnsetAdUserExecutor.
func (mr *MockUsecaseMockRecorder) UnsetAdUserExecutor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetAdUserExecutor", reflect.TypeOf((*MockUsecase)(nil).UnsetAdUserExecutor), arg0, arg1)
}

// Update mocks base method.
func (m *MockUsecase) Update(arg0 *models.Ad) *response.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*response.Response)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUsecaseMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsecase)(nil).Update), arg0)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRepository) Delete(arg0 uint32) (*models.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(*models.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), arg0)
}

// DeleteAdUserExecution mocks base method.
func (m *MockRepository) DeleteAdUserExecution(arg0 uint32) (*models.AdUserExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdUserExecution", arg0)
	ret0, _ := ret[0].(*models.AdUserExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAdUserExecution indicates an expected call of DeleteAdUserExecution.
func (mr *MockRepositoryMockRecorder) DeleteAdUserExecution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdUserExecution", reflect.TypeOf((*MockRepository)(nil).DeleteAdUserExecution), arg0)
}

// Insert mocks base method.
func (m *MockRepository) Insert(arg0 *models.Ad) (*models.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(*models.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockRepositoryMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRepository)(nil).Insert), arg0)
}

// InsertAdUserExecution mocks base method.
func (m *MockRepository) InsertAdUserExecution(arg0 *models.AdUserExecution) (*models.AdUserExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAdUserExecution", arg0)
	ret0, _ := ret[0].(*models.AdUserExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAdUserExecution indicates an expected call of InsertAdUserExecution.
func (mr *MockRepositoryMockRecorder) InsertAdUserExecution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAdUserExecution", reflect.TypeOf((*MockRepository)(nil).InsertAdUserExecution), arg0)
}

// Select mocks base method.
func (m *MockRepository) Select(arg0 uint32) (*models.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", arg0)
	ret0, _ := ret[0].(*models.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockRepositoryMockRecorder) Select(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockRepository)(nil).Select), arg0)
}

// SelectAdUserExecution mocks base method.
func (m *MockRepository) SelectAdUserExecution(arg0 uint32) (*models.AdUserExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAdUserExecution", arg0)
	ret0, _ := ret[0].(*models.AdUserExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAdUserExecution indicates an expected call of SelectAdUserExecution.
func (mr *MockRepositoryMockRecorder) SelectAdUserExecution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAdUserExecution", reflect.TypeOf((*MockRepository)(nil).SelectAdUserExecution), arg0)
}

// SelectArray mocks base method.
func (m *MockRepository) SelectArray(arg0 *models.AdsSearch) (*models.Ads, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectArray", arg0)
	ret0, _ := ret[0].(*models.Ads)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectArray indicates an expected call of SelectArray.
func (mr *MockRepositoryMockRecorder) SelectArray(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectArray", reflect.TypeOf((*MockRepository)(nil).SelectArray), arg0)
}

// Update mocks base method.
func (m *MockRepository) Update(arg0 *models.Ad) (*models.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*models.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), arg0)
}
