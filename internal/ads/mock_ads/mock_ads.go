// Code generated by MockGen. DO NOT EDIT.
// Source: /home/lobaevni/go/src/backend/internal/ads/interfaces.go

// Package mock_ads is a generated GoMock package.
package mock_ads

import (
	reflect "reflect"

	models "github.com/TechnoHandOver/backend/internal/models"
	response "github.com/TechnoHandOver/backend/internal/tools/response"
	gomock "github.com/golang/mock/gomock"
)

// MockAdsUsecase is a mock of AdsUsecase interface.
type MockAdsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAdsUsecaseMockRecorder
}

// MockAdsUsecaseMockRecorder is the mock recorder for MockAdsUsecase.
type MockAdsUsecaseMockRecorder struct {
	mock *MockAdsUsecase
}

// NewMockAdsUsecase creates a new mock instance.
func NewMockAdsUsecase(ctrl *gomock.Controller) *MockAdsUsecase {
	mock := &MockAdsUsecase{ctrl: ctrl}
	mock.recorder = &MockAdsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdsUsecase) EXPECT() *MockAdsUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAdsUsecase) Create(ads *models.Ads) *response.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ads)
	ret0, _ := ret[0].(*response.Response)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAdsUsecaseMockRecorder) Create(ads interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAdsUsecase)(nil).Create), ads)
}

// Get mocks base method.
func (m *MockAdsUsecase) Get(id uint32) *response.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*response.Response)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockAdsUsecaseMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAdsUsecase)(nil).Get), id)
}

// List mocks base method.
func (m *MockAdsUsecase) List() *response.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(*response.Response)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockAdsUsecaseMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAdsUsecase)(nil).List))
}

// Update mocks base method.
func (m *MockAdsUsecase) Update(id uint32, adsUpdate *models.AdsUpdate) *response.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, adsUpdate)
	ret0, _ := ret[0].(*response.Response)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAdsUsecaseMockRecorder) Update(id, adsUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAdsUsecase)(nil).Update), id, adsUpdate)
}

// MockAdsRepository is a mock of AdsRepository interface.
type MockAdsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdsRepositoryMockRecorder
}

// MockAdsRepositoryMockRecorder is the mock recorder for MockAdsRepository.
type MockAdsRepositoryMockRecorder struct {
	mock *MockAdsRepository
}

// NewMockAdsRepository creates a new mock instance.
func NewMockAdsRepository(ctrl *gomock.Controller) *MockAdsRepository {
	mock := &MockAdsRepository{ctrl: ctrl}
	mock.recorder = &MockAdsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdsRepository) EXPECT() *MockAdsRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockAdsRepository) Insert(ads *models.Ads) (*models.Ads, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ads)
	ret0, _ := ret[0].(*models.Ads)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockAdsRepositoryMockRecorder) Insert(ads interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockAdsRepository)(nil).Insert), ads)
}

// Select mocks base method.
func (m *MockAdsRepository) Select(id uint32) (*models.Ads, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", id)
	ret0, _ := ret[0].(*models.Ads)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockAdsRepositoryMockRecorder) Select(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockAdsRepository)(nil).Select), id)
}

// SelectArray mocks base method.
func (m *MockAdsRepository) SelectArray() (*models.Adses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectArray")
	ret0, _ := ret[0].(*models.Adses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectArray indicates an expected call of SelectArray.
func (mr *MockAdsRepositoryMockRecorder) SelectArray() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectArray", reflect.TypeOf((*MockAdsRepository)(nil).SelectArray))
}

// Update mocks base method.
func (m *MockAdsRepository) Update(id uint32, adsUpdate *models.AdsUpdate) (*models.Ads, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, adsUpdate)
	ret0, _ := ret[0].(*models.Ads)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAdsRepositoryMockRecorder) Update(id, adsUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAdsRepository)(nil).Update), id, adsUpdate)
}
